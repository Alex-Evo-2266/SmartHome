import os
import subprocess
from app.configuration.settings import ENV_FILE, CONFIG_SERVICES_DIR, MODULES_DIR, BASE_DIR, CONFIGURATE_DIR
from app.internal.module.install_module import generate_docker_compose_from_module
import shutil

def update_env_var_to_local(key: str, value: str, env_file: str = ENV_FILE) -> str:
	"""
	–°–æ–∑–¥–∞—ë—Ç –∫–æ–ø–∏—é .env —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º –∫–ª—é—á–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ .local.env —Ñ–∞–π–ª—É.
	"""
	if not os.path.exists(env_file):
		raise FileNotFoundError(f".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")

	local_env_file = os.path.join(BASE_DIR, ".local.env")

	shutil.copy(env_file, local_env_file)

	lines = []
	found = False
	with open(local_env_file, "r", encoding="utf-8") as f:
		for line in f:
			print(f"p9999 {line}")
			if line.strip().startswith(f"{key}="):
				lines.append(f"{key}={value}\n")
				found = True
			else:
				lines.append(line)

	if not found:
		lines.append(f"{key}={value}\n")

	with open(local_env_file, "w", encoding="utf-8") as f:
		f.writelines(lines)

	return local_env_file

def build_module_in_container(name: str, container: str | None = None):
	module_dir = os.path.join(MODULES_DIR, name)

	compose_file = os.path.join(module_dir, "docker-compose.yml")
	if not os.path.exists(compose_file):
		generate_docker_compose_from_module(module_dir)
		if not os.path.exists(compose_file):
			raise FileNotFoundError(f"docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {module_dir}")

	cmd = [
		"docker", "compose",
		"--env-file", ENV_FILE,
		"-f", compose_file,
		"build"
	]

	env = os.environ.copy()
	env["CONFIGURATE_DIR"] = CONFIGURATE_DIR

	try:
		subprocess.run(cmd, cwd=module_dir, check=True, env=env)
		print(f"‚úÖ –ú–æ–¥—É–ª—å {module_dir} –∑–∞–ø—É—â–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
	except subprocess.CalledProcessError as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è {module_dir}: {e}")
		raise

def run_module_in_container(name: str, container: str | None = None):
	"""
	–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–¥—É–ª—å —á–µ—Ä–µ–∑ docker compose –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ modules_manager,
	–∏—Å–ø–æ–ª—å–∑—É—è .env —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å NETWORK_NAME –∏ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
	"""

	module_dir = os.path.join(MODULES_DIR, name)

	compose_file = os.path.join(module_dir, "docker-compose.yml")
	if not os.path.exists(compose_file):
		generate_docker_compose_from_module(module_dir)
		if not os.path.exists(compose_file):
			raise FileNotFoundError(f"docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {module_dir}")
	
	cmd = [
		"docker", "compose",
		"--env-file", ENV_FILE,
		"-f", compose_file,
		"up", "-d"
	]

	if container:
		cmd.append(container)

	env = os.environ.copy()
	env["CONFIGURATE_DIR"] = CONFIGURATE_DIR

	try:
		subprocess.run(cmd, cwd=module_dir, check=True, env=env)
		print(f"‚úÖ –ú–æ–¥—É–ª—å {module_dir} –∑–∞–ø—É—â–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
	except subprocess.CalledProcessError as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è {module_dir}: {e}")
		raise

def stop_module_in_container(name: str, container: str | None = None):
	"""
	–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–¥—É–ª—å —á–µ—Ä–µ–∑ docker compose –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ modules_manager,
	–∏—Å–ø–æ–ª—å–∑—É—è .env —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å NETWORK_NAME –∏ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
	"""

	module_dir = os.path.join(MODULES_DIR, name)

	compose_file = os.path.join(module_dir, "docker-compose.yml")
	if not os.path.exists(compose_file):
		raise FileNotFoundError(f"docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {module_dir}")

	cmd = [
		"docker", "compose",
		"--env-file", ENV_FILE,
		"-f", compose_file,
		"stop"
	]

	if container:
		cmd.append(container)
	
	env = os.environ.copy()
	env["CONFIGURATE_DIR"] = CONFIGURATE_DIR

	try:
		subprocess.run(cmd, cwd=module_dir, check=True, env=env)
		print(f"‚úÖ –ú–æ–¥—É–ª—å {module_dir} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	except subprocess.CalledProcessError as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è {module_dir}: {e}")
		raise

def remove_module_containers(name: str):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–µ–º, —á–µ—Ä–µ–∑ docker compose down.
    """
    module_dir = os.path.join(MODULES_DIR, name)
    compose_file = os.path.join(module_dir, "docker-compose.yml")

    if not os.path.exists(compose_file):
        print(f"‚ÑπÔ∏è docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {module_dir}, –ø—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.")
        return

    cmd = [
        "docker", "compose",
        "--env-file", ENV_FILE,
        "-f", compose_file,
        "down"
    ]

    env = os.environ.copy()
    env["CONFIGURATE_DIR"] = CONFIGURATE_DIR

    try:
        subprocess.run(cmd, cwd=module_dir, check=True, env=env)
        print(f"üßπ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –º–æ–¥—É–ª—è '{name}' —É–¥–∞–ª–µ–Ω—ã.")
    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ '{name}': {e}")
