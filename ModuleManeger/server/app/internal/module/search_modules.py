import os
import json
import requests
import yaml
from typing import Dict, Any, List
from app.configuration.settings import CACHE_FILE
from app.internal.module.schemas.modules import ModulesConfAndLoad

def ensure_cache_file(path: str):
    if not os.path.exists(path):
        print(f"‚ö° –ö–µ—à {path} –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        save_cache(path, {})

def load_cache(path: str) -> dict:
    ensure_cache_file(path)
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def save_cache(path: str, data: dict):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def github_get_file_content(owner: str, repo: str, path: str, token: str = None) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ GitHub API"""
    api_url = f"https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    headers = {"Authorization": f"token {token}"} if token else {}

    try:
        resp = requests.get(api_url, headers=headers)
        resp.raise_for_status()
        content_data = resp.json()
        if "content" in content_data and content_data["encoding"] == "base64":
            import base64
            decoded = base64.b64decode(content_data["content"]).decode("utf-8")
            return decoded
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ {api_url}: {e}")
    return ""

def get_root_module_config_with_cache(repo_url: str, token: str = None, force_refresh: bool = False) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç module_config.yml –∏–∑ –∫–æ—Ä–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å)"""
    ensure_cache_file(CACHE_FILE)
    cache = load_cache(CACHE_FILE)

    if not force_refresh and repo_url in cache:
        print(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –¥–ª—è {repo_url}")
        return cache[repo_url]

    parts = repo_url.rstrip("/").split("/")
    owner, repo = parts[-2], parts[-1]

    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {repo_url} –Ω–∞ –Ω–∞–ª–∏—á–∏–µ module_config.yml –≤ –∫–æ—Ä–Ω–µ...")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ
    api_url = f"https://api.github.com/repos/{owner}/{repo}/contents/"
    headers = {"Authorization": f"token {token}"} if token else {}
    try:
        resp = requests.get(api_url, headers=headers)
        resp.raise_for_status()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {api_url}: {e}")
        return {}

    files = resp.json()
    config_data = {}
    for file in files:
        if file["type"] == "file" and file["name"] == "module_config.yml":
            print(f"üìÑ –ù–∞—à–ª–∏ module_config.yml –≤ {repo}")
            content = github_get_file_content(owner, repo, "module_config.yml", token)
            try:
                config_data = yaml.safe_load(content)
            except yaml.YAMLError as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML –≤ {repo}: {e}")
            break

    cache[repo_url] = config_data
    save_cache(CACHE_FILE, cache)
    return cache[repo_url]

def load_modules_list(list_repo_url: str, token: str = None) -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç modules.json –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥—É–ª–µ–π"""
    parts = list_repo_url.rstrip("/").split("/")
    owner, repo = parts[-2], parts[-1]

    print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º modules.json –∏–∑ {list_repo_url}...")
    content = github_get_file_content(owner, repo, "modules.json", token)
    try:
        modules = json.loads(content)
        return modules
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ modules.json: {e}")
        return []

def get_all_modules(
    list_repo_url: str,
    token: str = None,
    force_refresh: bool = False,
    no_cash: bool = False
) -> Dict[str, ModulesConfAndLoad]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ module_config.yml –∏–∑ —Å–ø–∏—Å–∫–∞ modules.json
    –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ Dict[str, ModulesConf]
    """
    repos = load_modules_list(list_repo_url, token)
    result: Dict[str, ModulesConfAndLoad] = {}

    for repo_url in repos:
        config_dict = get_root_module_config_with_cache(
            repo_url,
            token,
            force_refresh or no_cash   # –µ—Å–ª–∏ no_cash=True -> –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–µ—à
        )
        if not config_dict:
            continue
        try:
            result[repo_url] = ModulesConfAndLoad.parse_obj(config_dict)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ module_config.yml –¥–ª—è {repo_url}: {e}")

    return result