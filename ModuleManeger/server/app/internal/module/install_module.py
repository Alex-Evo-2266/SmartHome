import os
import yaml
import subprocess
from typing import Dict
from pathlib import Path
from app.internal.module.search_modules import get_all_modules
from app.configuration.settings import URL_REPO_MODULES_LIST, MODULES_DIR, CONFIG_SERVICES_DIR
from app.internal.module.schemas.modules import ModulesConf

def clone_module(name: str, token: str | None = None):
    modules = get_all_modules(URL_REPO_MODULES_LIST, token=token, force_refresh=False)
    for repo_url, config in modules.items():
        if(config.name_module == name):
            return clone_module_repo(repo_url, config.name_module)


def clone_module_repo(repo_url: str, name_module: str, base_dir: str = MODULES_DIR) -> str:
    """
    –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –º–æ–¥—É–ª—è –≤ –ø–∞–ø–∫—É base_dir.
    –ò–º—è –ø–∞–ø–∫–∏ –±–µ—Ä—ë—Ç—Å—è –∏–∑ config["name"].
    –ï—Å–ª–∏ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
    """
    if name_module == "":
        raise ValueError(f"–í –∫–æ–Ω—Ñ–∏–≥–µ {repo_url} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'name'")

    base_name = name_module
    target_dir = os.path.join(base_dir, base_name)

    # –ü–æ–¥–±–∏—Ä–∞–µ–º –∏–º—è —Å —Ü–∏—Ñ—Ä–æ–π, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å
    counter = 1
    final_dir = target_dir
    name = base_name
    while os.path.exists(final_dir):
        final_dir = os.path.join(base_dir, f"{base_name}_{counter}")
        name = f"{base_name}_{counter}"
        counter += 1

    # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    os.makedirs(base_dir, exist_ok=True)

    print(f"üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º {repo_url} –≤ {final_dir}")
    subprocess.run(["git", "clone", repo_url, final_dir], check=True)

    replace_module_name_in_config(final_dir, name)
    generate_docker_compose_from_module(final_dir)

    return final_dir


def replace_module_name_in_config(module_path: str, module_name: str) -> bool:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç module-config-template.yml –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –∏ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
    '__MODULE_NAME__' –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ module_name.

    :param module_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–æ–¥—É–ª—è (–≥–¥–µ –ª–µ–∂–∏—Ç module-config.yml)
    :param module_name: –ò–º—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–¥—É–ª—è –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    :return: True, –µ—Å–ª–∏ –∑–∞–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    config_path = os.path.join(module_path, "module-config-template.yml")
    config_path_out = os.path.join(module_path, "module-config.yml")

    if not os.path.exists(config_path):
        print(f"‚ùå –§–∞–π–ª module-config-template.yml –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return False

    try:
        with open(config_path, "r", encoding="utf-8") as f:
            content = f.read()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {config_path}: {e}")
        return False

    if "__MODULE_NAME__" not in content:
        print(f"‚ÑπÔ∏è –í —Ñ–∞–π–ª–µ {config_path} –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ __MODULE_NAME__ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return True

    # –ó–∞–º–µ–Ω–∞
    new_content = content.replace("__MODULE_NAME__", module_name)

    try:
        with open(config_path_out, "w", encoding="utf-8") as f:
            f.write(new_content)
        print(f"‚úÖ –í {config_path_out} –∑–∞–º–µ–Ω–µ–Ω–æ __MODULE_NAME__ ‚Üí {module_name}")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {config_path_out}: {e}")
        return False

def generate_docker_compose_from_module(module_path: str, output_path: str = None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç docker-compose.yml –Ω–∞ –æ—Å–Ω–æ–≤–µ module-config.yml –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ.

    :param module_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–æ–¥—É–ª—è, –≥–¥–µ –ª–µ–∂–∏—Ç module-config.yml
    :param output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è docker-compose.yml (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É)
    """
    config_path = os.path.join(module_path, "module-config.yml")
    if not os.path.exists(config_path):
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω module-config.yml: {config_path}")
        return False

    with open(config_path, "r", encoding="utf-8") as f:
        try:
            config = yaml.safe_load(f)
        except yaml.YAMLError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è YAML: {e}")
            return False

    containers = config.get("containers", [])
    if not containers:
        print("‚ö†Ô∏è –í module-config.yml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'containers'.")
        return False

    compose_data = {"services": {}, "networks": {
        "local_sh_network": {
            "name": "${NETWORK_NAME}",
            "external": True
        }
    }}

    for container in containers:
        name = container.get("name")
        conf = container.get("config", {})

        if not name:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–µ–∑ –∏–º–µ–Ω–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç—å
        conf.setdefault("networks", [])
        if "local_sh_network" not in conf["networks"]:
            conf["networks"].append("local_sh_network")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ services
        compose_data["services"][name] = {
            "container_name": name,
            **conf
        }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if not output_path:
        output_path = os.path.join(module_path, "docker-compose.yml")

    with open(output_path, "w", encoding="utf-8") as f:
        yaml.safe_dump(compose_data, f, sort_keys=False, allow_unicode=True)

    print(f"‚úÖ docker-compose.yml —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_path}")
    return True
