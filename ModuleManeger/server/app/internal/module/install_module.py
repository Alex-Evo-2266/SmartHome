import os
import subprocess
from typing import Dict
from pathlib import Path
from app.internal.module.search_modules import get_all_modules
from app.configuration.settings import URL_REPO_MODULES_LIST, MODULES_DIR, CONFIG_SERVICES_DIR
from app.internal.module.schemas.modules import ModulesConf

def clone_module(name: str):
    modules = get_all_modules(URL_REPO_MODULES_LIST, token=None, force_refresh=False)
    for repo_url, config in modules.items():
        if(config.name == name):
            return clone_module_repo(repo_url, config)


def clone_module_repo(repo_url: str, config: ModulesConf, base_dir: str = MODULES_DIR) -> str:
    """
    –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –º–æ–¥—É–ª—è –≤ –ø–∞–ø–∫—É base_dir.
    –ò–º—è –ø–∞–ø–∫–∏ –±–µ—Ä—ë—Ç—Å—è –∏–∑ config["name"].
    –ï—Å–ª–∏ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
    """
    if config.name == "":
        raise ValueError(f"–í –∫–æ–Ω—Ñ–∏–≥–µ {repo_url} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'name'")

    base_name = config.name
    target_dir = os.path.join(base_dir, base_name)

    # –ü–æ–¥–±–∏—Ä–∞–µ–º –∏–º—è —Å —Ü–∏—Ñ—Ä–æ–π, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ —É–∂–µ –µ—Å—Ç—å
    counter = 1
    final_dir = target_dir
    name = base_name
    while os.path.exists(final_dir):
        final_dir = os.path.join(base_dir, f"{base_name}_{counter}")
        name = f"{base_name}_{counter}"
        counter += 1

    # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    os.makedirs(base_dir, exist_ok=True)

    print(f"üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º {repo_url} –≤ {final_dir}")
    subprocess.run(["git", "clone", repo_url, final_dir], check=True)

    generate_compose_file(final_dir, name)

    return final_dir


def generate_compose_file(module_dir: str, module_name: str):
    """
    –ë–µ—Ä—ë—Ç docker-compose-template.yml –≤ module_dir,
    –∑–∞–º–µ–Ω—è–µ—Ç __MODULE_NAME__ –Ω–∞ module_name,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∫ docker-compose.yml
    """
    template_path = Path(module_dir) / "docker-compose-template.yml"
    target_path = Path(module_dir) / "docker-compose.yml"

    if not template_path.exists():
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω {template_path}")

    with open(template_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ __MODULE_NAME__
    content = content.replace("__MODULE_NAME__", module_name)
    content = content.replace("__CONFIG__", CONFIG_SERVICES_DIR)

    with open(target_path, "w", encoding="utf-8") as f:
        f.write(content)

    return target_path